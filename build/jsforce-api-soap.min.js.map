{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/soap.js"],"names":["f","g","exports","module","define","amd","window","global","self","this","jsforce","modules","api","Soap","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_","SOAP","SoapApi","conn","_conn","prototype","_invoke","method","message","schema","callback","xmlns","endpointUrl","instanceUrl","version","invoke","result","then","res","thenCall","Schemas","convertLead","leadConverts","isArray","LeadConvertResult","success","errors","leadId","accountId","contactId","opportunityId","merge","mergeRequests","MergeResult","id","mergedRecordIds","updatedRelatedIds","emptyRecycleBin","ids","EmptyRecycleBinResult","describeTabs","DescribeTabSetResult","label","logoUrl","namespace","selected","tabs","colors","theme","color","context","iconUrl","icons","height","width","url","contentType","custom","miniIconUrl","name","sobjectName","getServerTimestamp","GetServerTimestampResult","timestamp","getUserInfo","GetUserInfoResult","accessibilityMode","currencySymbol","orgAttachmentFileSizeLimit","orgDefaultCurrencyIsoCode","orgDisallowHtmlAttachments","orgHasPersonAccounts","organizationId","organizationMultiCurrency","organizationName","profileId","roleId","sessionSecondsValid","userDefaultCurrencyIsoCode","userEmail","userFullName","userId","userLanguage","userLocale","userName","userTimeZone","userType","userUiSkin","setPassword","password","resetPassword","create","sObjects","SaveResult","args","@xmlns","@xmlns:ns1","ns1:sObjects","update","upsert","externalIdFieldName","UpsertResult","ns1:externalIDFieldName","created","delete","DeleteResult","ns1:ids","on","soap"],"mappings":"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","file":"jsforce-api-soap.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * @file Salesforce SOAP API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = window.jsforce.require('lodash/core');\r\nvar jsforce = window.jsforce.require('./core');\r\nvar SOAP = window.jsforce.require('./soap');\r\n\r\n/**\r\n * API class for Partner SOAP call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar SoapApi = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Call SOAP Api (Partner) endpoint\r\n * @private\r\n */\r\nSoapApi.prototype._invoke = function(method, message, schema, callback) {\r\n  var soapEndpoint = new SOAP(this._conn, {\r\n    xmlns: \"urn:partner.soap.sforce.com\",\r\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/u/\" + this._conn.version\r\n  });\r\n  return soapEndpoint.invoke(method, message, { result: schema }).then(function(res) {\r\n    return res.result;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/* */\r\nvar Schemas = {};\r\n\r\n/**\r\n * @typedef SoapApi~LeadConvert\r\n * @prop {String} convertedStatus - Status of converted lead\r\n * @prop {String} leadId - Lead record Id to convert\r\n * @prop {String} [accountId] - Account record Id to assign the converted record\r\n * @prop {String} [contactId] - Contact record Id to assign the converted record\r\n * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity\r\n * @prop {String} [opportunityName] - Name of opportunity to create\r\n * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source\r\n * @prop {String} [ownerId] - Owner Id\r\n * @prop {Boolean} [sendNotificationEmail] - True if send notification email\r\n */\r\n/**\r\n * @typedef SoapApi~LeadConvertResult\r\n * @prop {String} leadId - Lead record Id to convert\r\n * @prop {String} [accountId] - Account record Id of converted lead\r\n * @prop {String} [contactId] - Contact record Id of converted lead\r\n * @prop {String} [opportunityId] - Opportunity record Id created in conversion\r\n * @prop {Boolean} success - True if successfully converted\r\n * @prop {Array.<Object>} errors - Error\r\n */\r\n/**\r\n * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.\r\n *\r\n * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts\r\n * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}\r\n */\r\nSoapApi.prototype.convertLead = function(leadConverts, callback) {\r\n  var schema = _.isArray(leadConverts) ? [ Schemas.LeadConvertResult ] : Schemas.LeadConvertResult;\r\n  return this._invoke(\"convertLead\", { leadConverts: leadConverts }, schema, callback);\r\n};\r\nSchemas.LeadConvertResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  leadId: 'string',\r\n  accountId: 'string',\r\n  contactId: 'string',\r\n  opportunityId: 'string'\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~MergeRequest\r\n * @prop {Object} masterRecord - The merge destination record\r\n * @prop {Array.<String>} recordToMergeIds - Ids of records to merge\r\n */\r\n/**\r\n * @typedef SoapApi~MergeResult\r\n * @prop {Boolean} success - True if successfully merged\r\n * @prop {Array.<Object>} errors - Error\r\n * @prop {String} id - ID of the master record\r\n * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record\r\n * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge\r\n */\r\n\r\n/**\r\n * Merge up to three records into one\r\n *\r\n * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests\r\n * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}\r\n */\r\nSoapApi.prototype.merge = function(mergeRequests, callback) {\r\n  var schema = _.isArray(mergeRequests) ? [ Schemas.MergeResult ] : Schemas.MergeResult;\r\n  return this._invoke(\"merge\", { mergeRequests: mergeRequests }, schema, callback);\r\n};\r\nSchemas.MergeResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string',\r\n  mergedRecordIds: ['string'],\r\n  updatedRelatedIds: ['string']\r\n};\r\n\r\n\r\n/**\r\n * @typedef SoapApi~EmptyRecycleBinResult\r\n * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin\r\n * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record\r\n * @prop {Array.<Object>} errors - Errors\r\n */\r\n/**\r\n * Delete records from the recycle bin immediately\r\n *\r\n * @param {Array.<String>} ids - Record ids to empty from recycle bin\r\n * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}\r\n */\r\nSoapApi.prototype.emptyRecycleBin = function(ids, callback) {\r\n  return this._invoke(\"emptyRecycleBin\", { ids: ids }, [ Schemas.EmptyRecycleBinResult ], callback);\r\n};\r\nSchemas.EmptyRecycleBinResult = {\r\n  id: 'string',\r\n  success: 'boolean',\r\n  errors: []\r\n};\r\n\r\n\r\n/**\r\n * @typedef SoapApi~DescribeTabSetResult\r\n * @prop {String} label - The display label for this standard or custom app\r\n * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app\r\n * @prop {String} namespace - Namespace of application package\r\n * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app\r\n * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app\r\n */\r\n/**\r\n * @typedef SoapApi~DescribeTab\r\n * @prop {Array.<Object>} colors - Array of color information used for a tab\r\n * @prop {Boolean} custom - true if this is a custom tab\r\n * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab\r\n * @prop {Array.<Object>} icons - Array of icon information used for a tab\r\n * @prop {String} label - The display label for this tab\r\n * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab\r\n * @prop {String} name - The API name of the tab\r\n * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab\r\n * @prop {String} url - A fully qualified URL for viewing this tab\r\n */\r\n/**\r\n * Returns information about the standard and custom apps available to the logged-in user\r\n *\r\n * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}\r\n */\r\nSoapApi.prototype.describeTabs = function(callback) {\r\n  return this._invoke(\"describeTabs\", {}, [ Schemas.DescribeTabSetResult ], callback);\r\n};\r\nSchemas.DescribeTabSetResult = {\r\n  label: 'string',\r\n  logoUrl: 'string',\r\n  namespace: 'string',\r\n  selected: 'boolean',\r\n  tabs: [{\r\n    colors: [{\r\n      theme: 'string',\r\n      color: 'string',\r\n      context: 'string'\r\n    }],\r\n    iconUrl: 'string',\r\n    icons: [{\r\n      theme: 'string',\r\n      height: 'number',\r\n      width: 'number',\r\n      url: 'string',\r\n      contentType: 'string'\r\n    }],\r\n    label: 'string',\r\n    custom: 'boolean',\r\n    miniIconUrl: 'string',\r\n    name: 'string',\r\n    sobjectName: 'string',\r\n    url: 'string'\r\n  }]\r\n};\r\n\r\n/**\r\n * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API\r\n *\r\n * @typedef SoapApi~ServerTimestampResult\r\n * @prop {String} timestamp - Timestamp\r\n */\r\n/**\r\n * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~ServerTimestampResult>}\r\n */\r\nSoapApi.prototype.getServerTimestamp = function(callback) {\r\n  return this._invoke(\"getServerTimestamp\", {}, Schemas.GetServerTimestampResult, callback);\r\n};\r\nSchemas.GetServerTimestampResult = {\r\n  timestamp: 'string'\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~UserInfoResult\r\n * @prop {Boolean} accessibilityMode\r\n * @prop {String} currencySymbol\r\n * @prop {Number} orgAttachmentFileSizeLimit\r\n * @prop {String} orgDefaultCurrencyIsoCode\r\n * @prop {String} orgDisallowHtmlAttachments\r\n * @prop {Boolean} orgHasPersonAccounts\r\n * @prop {String} organizationId\r\n * @prop {Boolean} organizationMultiCurrency\r\n * @prop {String} organizationName\r\n * @prop {String} profileId\r\n * @prop {String} roleId\r\n * @prop {Number} sessionSecondsValid\r\n * @prop {String} userDefaultCurrencyIsoCode\r\n * @prop {String} userEmail\r\n * @prop {String} userFullName\r\n * @prop {String} userId\r\n * @prop {String} userLanguage\r\n * @prop {String} userLocale\r\n * @prop {String} userName\r\n * @prop {String} userTimeZone\r\n * @prop {String} userType\r\n * @prop {String} userUiSkin\r\n */\r\n/**\r\n * Retrieves personal information for the user associated with the current session\r\n *\r\n * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~UserInfoResult>}\r\n */\r\nSoapApi.prototype.getUserInfo = function(callback) {\r\n  return this._invoke(\"getUserInfo\", {}, Schemas.GetUserInfoResult, callback);\r\n};\r\nSchemas.GetUserInfoResult = {\r\n  accessibilityMode: 'boolean',\r\n  currencySymbol: 'string',\r\n  orgAttachmentFileSizeLimit: 'number',\r\n  orgDefaultCurrencyIsoCode: 'string',\r\n  orgDisallowHtmlAttachments: 'boolean',\r\n  orgHasPersonAccounts: 'boolean',\r\n  organizationId: 'string',\r\n  organizationMultiCurrency: 'boolean',\r\n  organizationName: 'string',\r\n  profileId: 'string',\r\n  roleId: 'string',\r\n  sessionSecondsValid: 'number',\r\n  userDefaultCurrencyIsoCode: 'string',\r\n  userEmail: 'string',\r\n  userFullName: 'string',\r\n  userId: 'string',\r\n  userLanguage: 'string',\r\n  userLocale: 'string',\r\n  userName: 'string',\r\n  userTimeZone: 'string',\r\n  userType: 'string',\r\n  userUiSkin: 'string'\r\n};\r\n\r\n/**\r\n * Sets the specified user’s password to the specified value\r\n *\r\n * @param {String} userId - User Id to set password\r\n * @param {String} password - New password\r\n * @param {Callback.<String>} [callback] - Callback function\r\n * @returns {Promise.<String>}\r\n */\r\nSoapApi.prototype.setPassword = function(userId, password, callback) {\r\n  return this._invoke(\"setPassword\", { userId: userId, password: password }, callback);\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~ResetPasswordResult\r\n * @prop {String} password\r\n */\r\n/**\r\n * Resets the specified user’s password\r\n *\r\n * @param {String} userId - User Id to set password\r\n * @param {String} password - New password\r\n * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~ResetPasswordResult>}\r\n */\r\nSoapApi.prototype.resetPassword = function(userId, callback) {\r\n  return this._invoke(\"resetPassword\", { userId: userId }, callback);\r\n};\r\n\r\n/**\r\n * Adds one or more new records to your organization’s data\r\n *\r\n * @param {Array.<Object>} sObjects - Records to insert\r\n * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~SaveResult>}\r\n */\r\nSoapApi.prototype.create = function(sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.SaveResult ] : Schemas.SaveResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"create\", args, schema, callback);\r\n};\r\n\r\n/**\r\n * Updates one or more existing records in your organization’s data.\r\n *\r\n * @param {Array.<Object>} sObjects - Records to update\r\n * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~SaveResult>}\r\n */\r\nSoapApi.prototype.update = function(sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.SaveResult ] : Schemas.SaveResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"update\", args, schema, callback);\r\n};\r\n\r\nSchemas.SaveResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n/**\r\n * Creates new records and updates existing records in your organization’s data.\r\n *\r\n * @param {Array.<Object>} sObjects - Records to upsert\r\n * @param {Callback.<SoapApi~UpsertResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~UpsertResult>}\r\n */\r\nSoapApi.prototype.upsert = function(externalIdFieldName, sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.UpsertResult ] : Schemas.UpsertResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:externalIDFieldName' : externalIdFieldName,\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"upsert\", args, schema, callback);\r\n};\r\n\r\nSchemas.UpsertResult = {\r\n  created: 'boolean',\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n/**\r\n * Deletes one or more records from your organization’s data\r\n *\r\n * @param {Array.<Object>} ids - Id of records to delete\r\n * @param {Callback.<SoapApi~DeleteResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~DeleteResult>}\r\n */\r\nSoapApi.prototype.delete = function(ids, callback) {\r\n  var schema = _.isArray(ids) ? [ Schemas.DeleteResult ] : Schemas.DeleteResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:ids' : ids\r\n  };\r\n  return this._invoke(\"delete\", args, schema, callback);\r\n};\r\n\r\nSchemas.DeleteResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.soap = new SoapApi(conn);\r\n});\r\n\r\n\r\nmodule.exports = SoapApi;\r\n"]}