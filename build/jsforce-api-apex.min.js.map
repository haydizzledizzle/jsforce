{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/apex.js"],"names":["f","g","exports","module","define","amd","window","global","self","this","jsforce","modules","api","Apex","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","conn","_conn","prototype","_baseUrl","instanceUrl","_createRequestParams","method","path","body","options","params","url","_headers","test","headers","contentType","JSON","stringify","get","callback","undefined","request","thenCall","post","put","patch","del","on","apex"],"mappings":"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","file":"jsforce-api-apex.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * @file Manages Salesforce Apex REST endpoint calls\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar jsforce = window.jsforce.require('./core');\r\n\r\n/**\r\n * API class for Apex REST endpoint call\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Apex = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nApex.prototype._baseUrl = function() {\r\n  return this._conn.instanceUrl + \"/services/apexrest\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nApex.prototype._createRequestParams = function(method, path, body, options) {\r\n  var params = {\r\n    method: method,\r\n    url: this._baseUrl() + path\r\n  },\r\n  _headers = {};\r\n  if(options && 'object' === typeof options['headers']){\r\n    _headers = options['headers'];\r\n  }\r\n  if (!/^(GET|DELETE)$/i.test(method)) {\r\n    _headers[\"Content-Type\"] = \"application/json\";\r\n  }\r\n  params.headers = _headers;\r\n  if (body) {\r\n    var contentType = params.headers[\"Content-Type\"];\r\n    if (!contentType || contentType === \"application/json\") {\r\n      params.body = JSON.stringify(body);\r\n    } else {\r\n      params.body = body;\r\n    }\r\n  }\r\n  return params;\r\n};\r\n\r\n/**\r\n * Call Apex REST service in GET request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} options - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.get = function(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in POST request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} options - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.post = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('POST', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in PUT request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.put = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('PUT', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in PATCH request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.patch = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('PATCH', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Apex#delete()\r\n *\r\n * @method Apex#del\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\n/**\r\n * Call Apex REST service in DELETE request\r\n *\r\n * @method Apex#delete\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.del =\r\n  Apex.prototype[\"delete\"] = function(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.apex = new Apex(conn);\r\n});\r\n\r\n\r\nmodule.exports = Apex;\r\n"]}