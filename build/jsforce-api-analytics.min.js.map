{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/analytics.js"],"names":["f","g","exports","module","define","amd","window","global","self","this","jsforce","modules","api","Analytics","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","ReportInstance","report","id","_report","_conn","_","prototype","retrieve","callback","conn","url","_baseUrl","join","request","thenCall","Report","describe","del","destroy","method","clone","name","data","reportMetadata","params","headers","Content-Type","body","JSON","stringify","explain","run","exec","execute","options","isFunction","details","metadata","executeAsync","instance","instances","Dashboard","components","componentIds","isArray","isString","status","refresh","folderid","isObject","folderId","reports","dashboard","dashboards","on","analytics"],"mappings":"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","file":"jsforce-api-analytics.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * @file Manages Salesforce Analytics API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = window.jsforce.require('lodash/core'),\r\n    jsforce = window.jsforce.require('./core'),\r\n    Promise  = window.jsforce.require('./promise');\r\n\r\n/**\r\n * Report instance to retrieving asynchronously executed result\r\n *\r\n * @protected\r\n * @class Analytics~ReportInstance\r\n * @param {Analytics~Report} report - Report\r\n * @param {String} id - Report instance id\r\n */\r\nvar ReportInstance = function(report, id) {\r\n  this._report = report;\r\n  this._conn = report._conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Retrieve report result asynchronously executed\r\n *\r\n * @method Analytics~ReportInstance#retrieve\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReportInstance.prototype.retrieve = function(callback) {\r\n  var conn = this._conn,\r\n      report = this._report;\r\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\r\n  return conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Report object in Analytics API\r\n *\r\n * @protected\r\n * @class Analytics~Report\r\n * @param {Connection} conn Connection\r\n */\r\nvar Report = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe report metadata\r\n *\r\n * @method Analytics~Report#describe\r\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportMetadata>}\r\n */\r\nReport.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Analytics~Report#destroy()\r\n *\r\n * @method Analytics~Report#delete\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\n/**\r\n * Synonym of Analytics~Report#destroy()\r\n *\r\n * @method Analytics~Report#del\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\n/**\r\n * Destroy a report\r\n *\r\n * @method Analytics~Report#destroy\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype[\"delete\"] =\r\nReport.prototype.del =\r\nReport.prototype.destroy = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Clones a given report\r\n *\r\n * @method Analytics~Report#clone\r\n * @param {String} name - The name of the new report\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.clone = function(name, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  url += \"?cloneId=\" + this.id;\r\n  var data = { reportMetadata: { name: name } };\r\n  var params = { method : 'POST', url: url, headers: { \"Content-Type\" : \"application/json\" }, body: JSON.stringify(data)};\r\n\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Explain plan for executing report\r\n *\r\n * @method Analytics~Report#explain\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nReport.prototype.explain = function(callback) {\r\n  var url = \"/query/?explain=\" + this.id;\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report synchronously\r\n *\r\n * @method Analytics~Report#execute\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.run =\r\nReport.prototype.exec =\r\nReport.prototype.execute = function(options, callback) {\r\n  options = options || {};\r\n  if (_.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\r\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report asynchronously\r\n *\r\n * @method Analytics~Report#executeAsync\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\r\n */\r\nReport.prototype.executeAsync = function(options, callback) {\r\n  options = options || {};\r\n  if (_.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  if (options.details) {\r\n    url += \"?includeDetails=true\";\r\n  }\r\n  var params = { method : 'POST', url : url, body: \"\" };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get report instance for specified instance ID\r\n *\r\n * @method Analytics~Report#instance\r\n * @param {String} id - Report instance ID\r\n * @returns {Analytics~ReportInstance}\r\n */\r\nReport.prototype.instance = function(id) {\r\n  return new ReportInstance(this, id);\r\n};\r\n\r\n/**\r\n * List report instances which had been executed asynchronously\r\n *\r\n * @method Analytics~Report#instances\r\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\r\n */\r\nReport.prototype.instances = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Dashboard object in the Analytics API\r\n *\r\n * @protected\r\n * @class Analytics-Dashboard\r\n * @param {Connection} conn Connection\r\n * @param {String} id - The Id\r\n */\r\n\r\nvar Dashboard = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe dashboard metadata\r\n *\r\n * @method Analytics~Dashboard#describe\r\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardMetadata>}\r\n */\r\nDashboard.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get details about dashboard components\r\n *\r\n * @method Analytics~Dashboard#components\r\n * @param {Callback.<Analytics-DashboardComponentMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardComponentMetadata>}\r\n */\r\nDashboard.prototype.components = function(componentIds, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\r\n  var data = {};\r\n  if (_.isFunction(componentIds)) {\r\n    callback = componentIds;\r\n  } else if (_.isArray(componentIds)) {\r\n    data.componentIds = componentIds;\r\n  } else if (_.isString(componentIds)) {\r\n    data.componentIds = [ componentIds ];\r\n  }\r\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get dashboard status\r\n *\r\n * @method Analytics~Dashboard#status\r\n * @param {Callback.<Analytics-DashboardStatusMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardStatusMetadata>}\r\n */\r\nDashboard.prototype.status = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"status\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Refresh a dashboard\r\n *\r\n * @method Analytics~Dashboard#refresh\r\n * @param {Callback.<Analytics-DashboardStatusUrl>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardStatusUrl>}\r\n */\r\nDashboard.prototype.refresh = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\r\n  var params = { method : 'PUT', url : url, body: '' };\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Clone a dashboard\r\n *\r\n * @method Analytics~Dashboard#clone\r\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardMetadata>}\r\n */\r\nDashboard.prototype.clone = function(name, folderid, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\r\n  url += \"?cloneId=\" + this.id;\r\n  var data = {};\r\n\r\n  if (_.isObject(name)) {\r\n    data = name;\r\n    callback = folderid;\r\n  } else {\r\n    data.name = name;\r\n    data.folderId = folderid;\r\n  }\r\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\r\n\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Analytics~Dashboard#destroy()\r\n *\r\n * @method Analytics~Dashboard#delete\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\n/**\r\n * Synonym of Analytics~Dashboard#destroy()\r\n *\r\n * @method Analytics~Dashboard#del\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\n/**\r\n * Destroy a dashboard\r\n *\r\n * @method Analytics~Dashboard#destroy\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\nDashboard.prototype[\"delete\"] =\r\nDashboard.prototype.del =\r\nDashboard.prototype.destroy = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\r\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\r\n};\r\n\r\n/**\r\n * API class for Analytics API\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Analytics = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Get report object of Analytics API\r\n *\r\n * @param {String} id - Report Id\r\n * @returns {Analytics~Report}\r\n */\r\nAnalytics.prototype.report = function(id) {\r\n  return new Report(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent report list\r\n *\r\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\r\n */\r\nAnalytics.prototype.reports = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get dashboard object of Analytics API\r\n *\r\n * @param {String} id - Dashboard Id\r\n * @returns {Analytics~Dashboard}\r\n */\r\nAnalytics.prototype.dashboard = function(id) {\r\n  return new Dashboard(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent dashboard list\r\n *\r\n * @param {Callback.<Array.<Analytics~DashboardInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~DashboardInfo>>}\r\n */\r\nAnalytics.prototype.dashboards = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.analytics = new Analytics(conn);\r\n});\r\n\r\n\r\nmodule.exports = Analytics;\r\n"]}